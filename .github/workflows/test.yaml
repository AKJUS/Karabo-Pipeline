name: Tests

on: [ push ]

env:
  REGISTRY: ghcr.io
  IMAGE: ${{ env.REGISTRY }}/${{ github.repository }}

jobs:
  Build_Dev_Image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      imageid: ${{steps.image.outputs.imageid}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete untagged images
        uses: bots-house/ghcr-delete-image-action@v1.1.0
        with:
          owner: ${{ github.repository_owner }}
          name: ${{ github.event.repository.name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          untagged-keep-latest: 5

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=raw, value=dev

      - name: Build and push Docker image
        id: image
        uses: docker/build-push-action@v4
        with:
          file: docker/Dockerfile.dev
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  Test_Formatting:
    needs: Build_Dev_Image
    runs-on: ubuntu-latest
    container: ${{ env.IMAGE }}@${{ needs.Build_Dev_Image.outputs.imageid }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Install formatting-tools
        run: pip install -r requirements.txt
      - name: Check-flake8
        run: flake8 .
      - name: check-black
        run: black --check .
      - name: check-isort
        run: isort --check .

  Test_Karabo:
    needs: Test_Formatting
    runs-on: ubuntu-latest
    container: ${{ env.IMAGE }}@${{ needs.Build_Dev_Image.outputs.imageid }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Test Code
        shell: bash -l {0}
        run: |
          export IS_GITHUB_RUNNER=true
          export RUN_SLOW_TESTS=false
          python -m xmlrunner -o ./test-reports/junit
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: test-reports/**/*.xml
